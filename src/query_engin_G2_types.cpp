/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "query_engin_G2_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>



int _kQueryTypeValues[] = {
  QueryType::GET_USER,
  QueryType::ADD_USER,
  QueryType::GET_WORD,
  QueryType::ADD_WORD,
  QueryType::GET_TOKEN,
  QueryType::ADD_TOKEN,
  QueryType::GET_ALL_USER,
  QueryType::GET_ALL_WORD,
  QueryType::GET_ALL_TOKEN
};
const char* _kQueryTypeNames[] = {
  "GET_USER",
  "ADD_USER",
  "GET_WORD",
  "ADD_WORD",
  "GET_TOKEN",
  "ADD_TOKEN",
  "GET_ALL_USER",
  "GET_ALL_WORD",
  "GET_ALL_TOKEN"
};
const std::map<int, const char*> _QueryType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kQueryTypeValues, _kQueryTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


User::~User() throw() {
}


void User::__set_id(const int64_t val) {
  this->id = val;
}

void User::__set_name(const std::string& val) {
  this->name = val;
}

uint32_t User::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User &a, User &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

User::User(const User& other0) {
  id = other0.id;
  name = other0.name;
  __isset = other0.__isset;
}
User& User::operator=(const User& other1) {
  id = other1.id;
  name = other1.name;
  __isset = other1.__isset;
  return *this;
}
void User::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ")";
}


Word::~Word() throw() {
}


void Word::__set_id(const int64_t val) {
  this->id = val;
}

void Word::__set_name(const std::string& val) {
  this->name = val;
}

uint32_t Word::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Word::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Word");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Word &a, Word &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

Word::Word(const Word& other2) {
  id = other2.id;
  name = other2.name;
  __isset = other2.__isset;
}
Word& Word::operator=(const Word& other3) {
  id = other3.id;
  name = other3.name;
  __isset = other3.__isset;
  return *this;
}
void Word::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Word(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ")";
}


Token::~Token() throw() {
}


void Token::__set_name(const std::string& val) {
  this->name = val;
}

void Token::__set_tokenItemVetor(const std::vector<TokenItem> & val) {
  this->tokenItemVetor = val;
}

uint32_t Token::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tokenItemVetor.clear();
            uint32_t _size4;
            ::apache::thrift::protocol::TType _etype7;
            xfer += iprot->readListBegin(_etype7, _size4);
            this->tokenItemVetor.resize(_size4);
            uint32_t _i8;
            for (_i8 = 0; _i8 < _size4; ++_i8)
            {
              xfer += this->tokenItemVetor[_i8].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tokenItemVetor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Token::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Token");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenItemVetor", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tokenItemVetor.size()));
    std::vector<TokenItem> ::const_iterator _iter9;
    for (_iter9 = this->tokenItemVetor.begin(); _iter9 != this->tokenItemVetor.end(); ++_iter9)
    {
      xfer += (*_iter9).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Token &a, Token &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.tokenItemVetor, b.tokenItemVetor);
  swap(a.__isset, b.__isset);
}

Token::Token(const Token& other10) {
  name = other10.name;
  tokenItemVetor = other10.tokenItemVetor;
  __isset = other10.__isset;
}
Token& Token::operator=(const Token& other11) {
  name = other11.name;
  tokenItemVetor = other11.tokenItemVetor;
  __isset = other11.__isset;
  return *this;
}
void Token::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Token(";
  out << "name=" << to_string(name);
  out << ", " << "tokenItemVetor=" << to_string(tokenItemVetor);
  out << ")";
}


TokenItem::~TokenItem() throw() {
}


void TokenItem::__set_userId(const int64_t val) {
  this->userId = val;
}

void TokenItem::__set_wordId(const int64_t val) {
  this->wordId = val;
}

void TokenItem::__set_postion(const int32_t val) {
  this->postion = val;
}

void TokenItem::__set_length(const int32_t val) {
  this->length = val;
}

uint32_t TokenItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->userId);
          this->__isset.userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->wordId);
          this->__isset.wordId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->postion);
          this->__isset.postion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->length);
          this->__isset.length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TokenItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TokenItem");

  xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->userId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wordId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->wordId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("postion", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->postion);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("length", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TokenItem &a, TokenItem &b) {
  using ::std::swap;
  swap(a.userId, b.userId);
  swap(a.wordId, b.wordId);
  swap(a.postion, b.postion);
  swap(a.length, b.length);
  swap(a.__isset, b.__isset);
}

TokenItem::TokenItem(const TokenItem& other12) {
  userId = other12.userId;
  wordId = other12.wordId;
  postion = other12.postion;
  length = other12.length;
  __isset = other12.__isset;
}
TokenItem& TokenItem::operator=(const TokenItem& other13) {
  userId = other13.userId;
  wordId = other13.wordId;
  postion = other13.postion;
  length = other13.length;
  __isset = other13.__isset;
  return *this;
}
void TokenItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TokenItem(";
  out << "userId=" << to_string(userId);
  out << ", " << "wordId=" << to_string(wordId);
  out << ", " << "postion=" << to_string(postion);
  out << ", " << "length=" << to_string(length);
  out << ")";
}


Request::~Request() throw() {
}


void Request::__set_querytype(const QueryType::type val) {
  this->querytype = val;
}

void Request::__set_get_user_user_id(const int64_t val) {
  this->get_user_user_id = val;
__isset.get_user_user_id = true;
}

void Request::__set_add_user_user(const User& val) {
  this->add_user_user = val;
__isset.add_user_user = true;
}

void Request::__set_get_word_word_id(const int64_t val) {
  this->get_word_word_id = val;
__isset.get_word_word_id = true;
}

void Request::__set_add_word_word(const Word& val) {
  this->add_word_word = val;
__isset.add_word_word = true;
}

void Request::__set_add_token_token(const Token& val) {
  this->add_token_token = val;
__isset.add_token_token = true;
}

void Request::__set_get_token_token_name(const std::string& val) {
  this->get_token_token_name = val;
__isset.get_token_token_name = true;
}

uint32_t Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_querytype = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast14;
          xfer += iprot->readI32(ecast14);
          this->querytype = (QueryType::type)ecast14;
          isset_querytype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->get_user_user_id);
          this->__isset.get_user_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->add_user_user.read(iprot);
          this->__isset.add_user_user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->get_word_word_id);
          this->__isset.get_word_word_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->add_word_word.read(iprot);
          this->__isset.add_word_word = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->add_token_token.read(iprot);
          this->__isset.add_token_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->get_token_token_name);
          this->__isset.get_token_token_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_querytype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Request");

  xfer += oprot->writeFieldBegin("querytype", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->querytype);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.get_user_user_id) {
    xfer += oprot->writeFieldBegin("get_user_user_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->get_user_user_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.add_user_user) {
    xfer += oprot->writeFieldBegin("add_user_user", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->add_user_user.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.get_word_word_id) {
    xfer += oprot->writeFieldBegin("get_word_word_id", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->get_word_word_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.add_word_word) {
    xfer += oprot->writeFieldBegin("add_word_word", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->add_word_word.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.add_token_token) {
    xfer += oprot->writeFieldBegin("add_token_token", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->add_token_token.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.get_token_token_name) {
    xfer += oprot->writeFieldBegin("get_token_token_name", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->get_token_token_name);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Request &a, Request &b) {
  using ::std::swap;
  swap(a.querytype, b.querytype);
  swap(a.get_user_user_id, b.get_user_user_id);
  swap(a.add_user_user, b.add_user_user);
  swap(a.get_word_word_id, b.get_word_word_id);
  swap(a.add_word_word, b.add_word_word);
  swap(a.add_token_token, b.add_token_token);
  swap(a.get_token_token_name, b.get_token_token_name);
  swap(a.__isset, b.__isset);
}

Request::Request(const Request& other15) {
  querytype = other15.querytype;
  get_user_user_id = other15.get_user_user_id;
  add_user_user = other15.add_user_user;
  get_word_word_id = other15.get_word_word_id;
  add_word_word = other15.add_word_word;
  add_token_token = other15.add_token_token;
  get_token_token_name = other15.get_token_token_name;
  __isset = other15.__isset;
}
Request& Request::operator=(const Request& other16) {
  querytype = other16.querytype;
  get_user_user_id = other16.get_user_user_id;
  add_user_user = other16.add_user_user;
  get_word_word_id = other16.get_word_word_id;
  add_word_word = other16.add_word_word;
  add_token_token = other16.add_token_token;
  get_token_token_name = other16.get_token_token_name;
  __isset = other16.__isset;
  return *this;
}
void Request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Request(";
  out << "querytype=" << to_string(querytype);
  out << ", " << "get_user_user_id="; (__isset.get_user_user_id ? (out << to_string(get_user_user_id)) : (out << "<null>"));
  out << ", " << "add_user_user="; (__isset.add_user_user ? (out << to_string(add_user_user)) : (out << "<null>"));
  out << ", " << "get_word_word_id="; (__isset.get_word_word_id ? (out << to_string(get_word_word_id)) : (out << "<null>"));
  out << ", " << "add_word_word="; (__isset.add_word_word ? (out << to_string(add_word_word)) : (out << "<null>"));
  out << ", " << "add_token_token="; (__isset.add_token_token ? (out << to_string(add_token_token)) : (out << "<null>"));
  out << ", " << "get_token_token_name="; (__isset.get_token_token_name ? (out << to_string(get_token_token_name)) : (out << "<null>"));
  out << ")";
}


Response::~Response() throw() {
}


void Response::__set_querytype(const QueryType::type val) {
  this->querytype = val;
}

void Response::__set_get_user_user(const User& val) {
  this->get_user_user = val;
__isset.get_user_user = true;
}

void Response::__set_add_user_user_id(const int64_t val) {
  this->add_user_user_id = val;
__isset.add_user_user_id = true;
}

void Response::__set_add_word_word_id(const int64_t val) {
  this->add_word_word_id = val;
__isset.add_word_word_id = true;
}

void Response::__set_get_word_word(const Word& val) {
  this->get_word_word = val;
__isset.get_word_word = true;
}

void Response::__set_get_token_token(const Token& val) {
  this->get_token_token = val;
__isset.get_token_token = true;
}

void Response::__set_get_all_user_user_list(const std::vector<User> & val) {
  this->get_all_user_user_list = val;
__isset.get_all_user_user_list = true;
}

void Response::__set_get_all_word_word_list(const std::vector<Word> & val) {
  this->get_all_word_word_list = val;
__isset.get_all_word_word_list = true;
}

void Response::__set_get_all_token_token_list(const std::vector<Token> & val) {
  this->get_all_token_token_list = val;
__isset.get_all_token_token_list = true;
}

uint32_t Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_querytype = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast17;
          xfer += iprot->readI32(ecast17);
          this->querytype = (QueryType::type)ecast17;
          isset_querytype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->get_user_user.read(iprot);
          this->__isset.get_user_user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->add_user_user_id);
          this->__isset.add_user_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->add_word_word_id);
          this->__isset.add_word_word_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->get_word_word.read(iprot);
          this->__isset.get_word_word = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->get_token_token.read(iprot);
          this->__isset.get_token_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->get_all_user_user_list.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->get_all_user_user_list.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += this->get_all_user_user_list[_i22].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.get_all_user_user_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->get_all_word_word_list.clear();
            uint32_t _size23;
            ::apache::thrift::protocol::TType _etype26;
            xfer += iprot->readListBegin(_etype26, _size23);
            this->get_all_word_word_list.resize(_size23);
            uint32_t _i27;
            for (_i27 = 0; _i27 < _size23; ++_i27)
            {
              xfer += this->get_all_word_word_list[_i27].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.get_all_word_word_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->get_all_token_token_list.clear();
            uint32_t _size28;
            ::apache::thrift::protocol::TType _etype31;
            xfer += iprot->readListBegin(_etype31, _size28);
            this->get_all_token_token_list.resize(_size28);
            uint32_t _i32;
            for (_i32 = 0; _i32 < _size28; ++_i32)
            {
              xfer += this->get_all_token_token_list[_i32].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.get_all_token_token_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_querytype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Response");

  xfer += oprot->writeFieldBegin("querytype", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->querytype);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.get_user_user) {
    xfer += oprot->writeFieldBegin("get_user_user", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->get_user_user.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.add_user_user_id) {
    xfer += oprot->writeFieldBegin("add_user_user_id", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->add_user_user_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.add_word_word_id) {
    xfer += oprot->writeFieldBegin("add_word_word_id", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->add_word_word_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.get_word_word) {
    xfer += oprot->writeFieldBegin("get_word_word", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->get_word_word.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.get_token_token) {
    xfer += oprot->writeFieldBegin("get_token_token", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->get_token_token.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.get_all_user_user_list) {
    xfer += oprot->writeFieldBegin("get_all_user_user_list", ::apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->get_all_user_user_list.size()));
      std::vector<User> ::const_iterator _iter33;
      for (_iter33 = this->get_all_user_user_list.begin(); _iter33 != this->get_all_user_user_list.end(); ++_iter33)
      {
        xfer += (*_iter33).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.get_all_word_word_list) {
    xfer += oprot->writeFieldBegin("get_all_word_word_list", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->get_all_word_word_list.size()));
      std::vector<Word> ::const_iterator _iter34;
      for (_iter34 = this->get_all_word_word_list.begin(); _iter34 != this->get_all_word_word_list.end(); ++_iter34)
      {
        xfer += (*_iter34).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.get_all_token_token_list) {
    xfer += oprot->writeFieldBegin("get_all_token_token_list", ::apache::thrift::protocol::T_LIST, 9);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->get_all_token_token_list.size()));
      std::vector<Token> ::const_iterator _iter35;
      for (_iter35 = this->get_all_token_token_list.begin(); _iter35 != this->get_all_token_token_list.end(); ++_iter35)
      {
        xfer += (*_iter35).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Response &a, Response &b) {
  using ::std::swap;
  swap(a.querytype, b.querytype);
  swap(a.get_user_user, b.get_user_user);
  swap(a.add_user_user_id, b.add_user_user_id);
  swap(a.add_word_word_id, b.add_word_word_id);
  swap(a.get_word_word, b.get_word_word);
  swap(a.get_token_token, b.get_token_token);
  swap(a.get_all_user_user_list, b.get_all_user_user_list);
  swap(a.get_all_word_word_list, b.get_all_word_word_list);
  swap(a.get_all_token_token_list, b.get_all_token_token_list);
  swap(a.__isset, b.__isset);
}

Response::Response(const Response& other36) {
  querytype = other36.querytype;
  get_user_user = other36.get_user_user;
  add_user_user_id = other36.add_user_user_id;
  add_word_word_id = other36.add_word_word_id;
  get_word_word = other36.get_word_word;
  get_token_token = other36.get_token_token;
  get_all_user_user_list = other36.get_all_user_user_list;
  get_all_word_word_list = other36.get_all_word_word_list;
  get_all_token_token_list = other36.get_all_token_token_list;
  __isset = other36.__isset;
}
Response& Response::operator=(const Response& other37) {
  querytype = other37.querytype;
  get_user_user = other37.get_user_user;
  add_user_user_id = other37.add_user_user_id;
  add_word_word_id = other37.add_word_word_id;
  get_word_word = other37.get_word_word;
  get_token_token = other37.get_token_token;
  get_all_user_user_list = other37.get_all_user_user_list;
  get_all_word_word_list = other37.get_all_word_word_list;
  get_all_token_token_list = other37.get_all_token_token_list;
  __isset = other37.__isset;
  return *this;
}
void Response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Response(";
  out << "querytype=" << to_string(querytype);
  out << ", " << "get_user_user="; (__isset.get_user_user ? (out << to_string(get_user_user)) : (out << "<null>"));
  out << ", " << "add_user_user_id="; (__isset.add_user_user_id ? (out << to_string(add_user_user_id)) : (out << "<null>"));
  out << ", " << "add_word_word_id="; (__isset.add_word_word_id ? (out << to_string(add_word_word_id)) : (out << "<null>"));
  out << ", " << "get_word_word="; (__isset.get_word_word ? (out << to_string(get_word_word)) : (out << "<null>"));
  out << ", " << "get_token_token="; (__isset.get_token_token ? (out << to_string(get_token_token)) : (out << "<null>"));
  out << ", " << "get_all_user_user_list="; (__isset.get_all_user_user_list ? (out << to_string(get_all_user_user_list)) : (out << "<null>"));
  out << ", " << "get_all_word_word_list="; (__isset.get_all_word_word_list ? (out << to_string(get_all_word_word_list)) : (out << "<null>"));
  out << ", " << "get_all_token_token_list="; (__isset.get_all_token_token_list ? (out << to_string(get_all_token_token_list)) : (out << "<null>"));
  out << ")";
}



/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef query_engin_G2_TYPES_H
#define query_engin_G2_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class User;

class Word;

class Token;

class TokenItem;

typedef struct _User__isset {
  _User__isset() : id(false), name(false) {}
  bool id :1;
  bool name :1;
} _User__isset;

class User {
 public:

  User(const User&);
  User& operator=(const User&);
  User() : id(0), name() {
  }

  virtual ~User() throw();
  int64_t id;
  std::string name;

  _User__isset __isset;

  void __set_id(const int64_t val);

  void __set_name(const std::string& val);

  bool operator == (const User & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const User &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(User &a, User &b);

inline std::ostream& operator<<(std::ostream& out, const User& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Word__isset {
  _Word__isset() : id(false), name(false) {}
  bool id :1;
  bool name :1;
} _Word__isset;

class Word {
 public:

  Word(const Word&);
  Word& operator=(const Word&);
  Word() : id(0), name() {
  }

  virtual ~Word() throw();
  int64_t id;
  std::string name;

  _Word__isset __isset;

  void __set_id(const int64_t val);

  void __set_name(const std::string& val);

  bool operator == (const Word & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Word &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Word & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Word &a, Word &b);

inline std::ostream& operator<<(std::ostream& out, const Word& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Token__isset {
  _Token__isset() : name(false), tokenItemVetor(false) {}
  bool name :1;
  bool tokenItemVetor :1;
} _Token__isset;

class Token {
 public:

  Token(const Token&);
  Token& operator=(const Token&);
  Token() : name() {
  }

  virtual ~Token() throw();
  std::string name;
  std::vector<TokenItem>  tokenItemVetor;

  _Token__isset __isset;

  void __set_name(const std::string& val);

  void __set_tokenItemVetor(const std::vector<TokenItem> & val);

  bool operator == (const Token & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(tokenItemVetor == rhs.tokenItemVetor))
      return false;
    return true;
  }
  bool operator != (const Token &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Token & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Token &a, Token &b);

inline std::ostream& operator<<(std::ostream& out, const Token& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TokenItem__isset {
  _TokenItem__isset() : userId(false), wordId(false), postion(false), length(false) {}
  bool userId :1;
  bool wordId :1;
  bool postion :1;
  bool length :1;
} _TokenItem__isset;

class TokenItem {
 public:

  TokenItem(const TokenItem&);
  TokenItem& operator=(const TokenItem&);
  TokenItem() : userId(0), wordId(0), postion(0), length(0) {
  }

  virtual ~TokenItem() throw();
  int64_t userId;
  int64_t wordId;
  int32_t postion;
  int32_t length;

  _TokenItem__isset __isset;

  void __set_userId(const int64_t val);

  void __set_wordId(const int64_t val);

  void __set_postion(const int32_t val);

  void __set_length(const int32_t val);

  bool operator == (const TokenItem & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(wordId == rhs.wordId))
      return false;
    if (!(postion == rhs.postion))
      return false;
    if (!(length == rhs.length))
      return false;
    return true;
  }
  bool operator != (const TokenItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TokenItem &a, TokenItem &b);

inline std::ostream& operator<<(std::ostream& out, const TokenItem& obj)
{
  obj.printTo(out);
  return out;
}



#endif

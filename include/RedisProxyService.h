/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RedisProxyService_H
#define RedisProxyService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "query_engin_G2_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class RedisProxyServiceIf {
 public:
  virtual ~RedisProxyServiceIf() {}
  virtual void process(Response& _return, const Request& req) = 0;
};

class RedisProxyServiceIfFactory {
 public:
  typedef RedisProxyServiceIf Handler;

  virtual ~RedisProxyServiceIfFactory() {}

  virtual RedisProxyServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RedisProxyServiceIf* /* handler */) = 0;
};

class RedisProxyServiceIfSingletonFactory : virtual public RedisProxyServiceIfFactory {
 public:
  RedisProxyServiceIfSingletonFactory(const boost::shared_ptr<RedisProxyServiceIf>& iface) : iface_(iface) {}
  virtual ~RedisProxyServiceIfSingletonFactory() {}

  virtual RedisProxyServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RedisProxyServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<RedisProxyServiceIf> iface_;
};

class RedisProxyServiceNull : virtual public RedisProxyServiceIf {
 public:
  virtual ~RedisProxyServiceNull() {}
  void process(Response& /* _return */, const Request& /* req */) {
    return;
  }
};

typedef struct _RedisProxyService_process_args__isset {
  _RedisProxyService_process_args__isset() : req(false) {}
  bool req :1;
} _RedisProxyService_process_args__isset;

class RedisProxyService_process_args {
 public:

  RedisProxyService_process_args(const RedisProxyService_process_args&);
  RedisProxyService_process_args& operator=(const RedisProxyService_process_args&);
  RedisProxyService_process_args() {
  }

  virtual ~RedisProxyService_process_args() throw();
  Request req;

  _RedisProxyService_process_args__isset __isset;

  void __set_req(const Request& val);

  bool operator == (const RedisProxyService_process_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const RedisProxyService_process_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RedisProxyService_process_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RedisProxyService_process_pargs {
 public:


  virtual ~RedisProxyService_process_pargs() throw();
  const Request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RedisProxyService_process_result__isset {
  _RedisProxyService_process_result__isset() : success(false) {}
  bool success :1;
} _RedisProxyService_process_result__isset;

class RedisProxyService_process_result {
 public:

  RedisProxyService_process_result(const RedisProxyService_process_result&);
  RedisProxyService_process_result& operator=(const RedisProxyService_process_result&);
  RedisProxyService_process_result() {
  }

  virtual ~RedisProxyService_process_result() throw();
  Response success;

  _RedisProxyService_process_result__isset __isset;

  void __set_success(const Response& val);

  bool operator == (const RedisProxyService_process_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RedisProxyService_process_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RedisProxyService_process_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RedisProxyService_process_presult__isset {
  _RedisProxyService_process_presult__isset() : success(false) {}
  bool success :1;
} _RedisProxyService_process_presult__isset;

class RedisProxyService_process_presult {
 public:


  virtual ~RedisProxyService_process_presult() throw();
  Response* success;

  _RedisProxyService_process_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RedisProxyServiceClient : virtual public RedisProxyServiceIf {
 public:
  RedisProxyServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RedisProxyServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void process(Response& _return, const Request& req);
  void send_process(const Request& req);
  void recv_process(Response& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RedisProxyServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RedisProxyServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RedisProxyServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_process(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RedisProxyServiceProcessor(boost::shared_ptr<RedisProxyServiceIf> iface) :
    iface_(iface) {
    processMap_["process"] = &RedisProxyServiceProcessor::process_process;
  }

  virtual ~RedisProxyServiceProcessor() {}
};

class RedisProxyServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RedisProxyServiceProcessorFactory(const ::boost::shared_ptr< RedisProxyServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RedisProxyServiceIfFactory > handlerFactory_;
};

class RedisProxyServiceMultiface : virtual public RedisProxyServiceIf {
 public:
  RedisProxyServiceMultiface(std::vector<boost::shared_ptr<RedisProxyServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RedisProxyServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RedisProxyServiceIf> > ifaces_;
  RedisProxyServiceMultiface() {}
  void add(boost::shared_ptr<RedisProxyServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void process(Response& _return, const Request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->process(_return, req);
    }
    ifaces_[i]->process(_return, req);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class RedisProxyServiceConcurrentClient : virtual public RedisProxyServiceIf {
 public:
  RedisProxyServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RedisProxyServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void process(Response& _return, const Request& req);
  int32_t send_process(const Request& req);
  void recv_process(Response& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
